{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { ShopParams } from '../shared/models/shopParams';\nimport { map, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ShopService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:5001/api/';\n    this.products = [];\n    this.brands = [];\n    this.types = [];\n    this.shopParams = new ShopParams();\n    this.productCache = new Map(); //this Map is a JS map that store info in key, value pair\n  }\n  //getProducts(brandId?: number, typeId?: number, sort?: string) {\n  getProducts(useCache = true) {\n    //angular param for the query string\n    let params = new HttpParams();\n    if (this.shopParams.brandId > 0) params = params.append('brandId', this.shopParams.brandId);\n    if (this.shopParams.typeId) params = params.append('typeId', this.shopParams.typeId);\n    params = params.append('sort', this.shopParams.sort);\n    params = params.append('pageIndex', this.shopParams.pageNumber);\n    params = params.append('pageSize', this.shopParams.pageSize);\n    if (this.shopParams.search) params = params.append('search', this.shopParams.search);\n    //return this.http.get<Pagination<Product[]>>(this.baseUrl + 'products?pageSize=50');//better way to include the query string is to use angular params\n    return this.http.get(this.baseUrl + 'products', {\n      params: params\n    }).pipe(map(response => {\n      this.products = [...this.products, ...response.data]; //adding the old and the new response\n      this.pagination = response;\n      return response;\n    }));\n  }\n  setShopParams(params) {\n    this.shopParams = params;\n  }\n  getShopParams() {\n    return this.shopParams;\n  }\n  getProduct(id) {\n    const product = this.products.find(p => p.id === id);\n    if (product) return of(product); //we us of, becos we want an observable of product to be returned.\n    return this.http.get(this.baseUrl + 'products/' + id);\n  }\n  getBrands() {\n    if (this.brands.length > 0) return of(this.brands); //to check if we hv brand in our client side\n    return this.http.get(this.baseUrl + 'products/brands').pipe(\n    //if we dont hv it, get it from the API\n    map(brands => this.brands = brands));\n  }\n  getTypes() {\n    if (this.types.length > 0) return of(this.types);\n    return this.http.get(this.baseUrl + 'products/types').pipe(map(types => this.types = types));\n  }\n}\nShopService.ɵfac = function ShopService_Factory(t) {\n  return new (t || ShopService)(i0.ɵɵinject(i1.HttpClient));\n};\nShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShopService,\n  factory: ShopService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpParams","ShopParams","map","of","ShopService","constructor","http","Map","getProducts","useCache","params","shopParams","brandId","append","typeId","sort","pageNumber","pageSize","search","get","baseUrl","pipe","response","products","data","pagination","setShopParams","getShopParams","getProduct","id","product","find","p","getBrands","brands","length","getTypes","types","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\olumi\\Desktop\\ECommerce\\client\\src\\app\\shop\\shop.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Pagination } from '../shared/models/pagination';\nimport { Product } from '../shared/models/product';\nimport { Brand } from '../shared/models/brand';\nimport { Type } from '../shared/models/type';\nimport { ShopParams } from '../shared/models/shopParams';\nimport { map, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  baseUrl = 'https://localhost:5001/api/';\n  pagination?: Pagination<Product[]>;\n  products: Product[] = [];\n  brands: Brand[] = [];\n  types: Type[] = [];\n  shopParams = new ShopParams();\n  productCache = new Map(); //this Map is a JS map that store info in key, value pair\n\n  constructor(private http: HttpClient) { }\n\n  //getProducts(brandId?: number, typeId?: number, sort?: string) {\n    getProducts(useCache = true) {\n\n\n      \n    //angular param for the query string\n      let params = new HttpParams();\n      \n      if (this.shopParams.brandId > 0) params = params.append('brandId', this.shopParams.brandId);\n      if (this.shopParams.typeId) params = params.append('typeId', this.shopParams.typeId);\n             params = params.append('sort', this.shopParams.sort);\n             params = params.append('pageIndex', this.shopParams.pageNumber);\n             params = params.append('pageSize', this.shopParams.pageSize);\n      if(this.shopParams.search) params = params.append('search', this.shopParams.search);\n\n    //return this.http.get<Pagination<Product[]>>(this.baseUrl + 'products?pageSize=50');//better way to include the query string is to use angular params\n    return this.http.get<Pagination<Product[]>>(this.baseUrl + 'products', {params: params}).pipe(\n      map(response => {\n        this.products = [...this.products, ...response.data]; //adding the old and the new response\n        this.pagination = response;\n        return response;\n      })\n    )\n  }\n\n  setShopParams(params: ShopParams) {\n    this.shopParams = params;\n  }\n\n  getShopParams() {\n    return this.shopParams;\n  }\n\n  getProduct(id: number) {\n    const product = this.products.find(p => p.id === id);\n    if (product) return of(product); //we us of, becos we want an observable of product to be returned.\n\n    return this.http.get<Product>(this.baseUrl + 'products/' + id);\n  }\n\n  getBrands() {\n    if (this.brands.length > 0) return of(this.brands); //to check if we hv brand in our client side\n    return this.http.get<Brand[]>(this.baseUrl + 'products/brands').pipe( //if we dont hv it, get it from the API\n     map(brands => this.brands = brands)\n    ); \n  }\n\n  getTypes() {\n    if (this.types.length > 0) return of(this.types);\n    return this.http.get<Type[]>(this.baseUrl + 'products/types').pipe(\n      map(types => this.types = types)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}