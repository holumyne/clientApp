{"ast":null,"code":"import { BehaviorSubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Basket } from '../shared/models/basket';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BasketService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.apiUrl;\n    this.basketSource = new BehaviorSubject(null); //this null means that when our app first start up b4 we done anything, we are not going to hv a basket and it will be null. other component will not hv access to this thats why its private. you can only update this from inside our service\n    this.basketSource$ = this.basketSource.asObservable(); //our component will be able to subscribe to this and get the info they want\n    this.basketTotalSource = new BehaviorSubject(null);\n    this.basketTotalSource$ = this.basketTotalSource.asObservable();\n    this.shipping = 0;\n  }\n  createPaymentIntent() {\n    return this.http.post(this.baseUrl + 'payments/' + this.getCurrentBasketValue()?.id, {}).pipe(map(basket => {\n      this.basketSource.next(basket);\n      console.lo;\n    }));\n  }\n  setShippingPrice(deliveryMethod) {\n    const basket = this.getCurrentBasketValue();\n    this.shipping = deliveryMethod.price;\n    if (basket) {\n      basket.deliveryMethodId = deliveryMethod.id;\n      this.setBasket(basket);\n    }\n  }\n  getBasket(id) {\n    return this.http.get(this.baseUrl + 'basket?id=' + id).subscribe({\n      next: basket => {\n        this.basketSource.next(basket);\n        this.calculateTotals();\n      }\n    });\n  }\n  setBasket(basket) {\n    return this.http.post(this.baseUrl + 'basket', basket).subscribe({\n      next: basket => {\n        this.basketSource.next(basket);\n        this.calculateTotals();\n      }\n    });\n  }\n  getCurrentBasketValue() {\n    return this.basketSource.value;\n  }\n  addItemToBasket(item, quantity = 1) {\n    if (this.isProduct(item)) item = this.mapProductItemToBasketItem(item); //type guard is used here referencing isProduct below\n    console.log(item);\n    const basket = this.getCurrentBasketValue() ?? this.createBasket();\n    basket.items = this.addOrUpdateItem(basket.items, item, quantity);\n    this.setBasket(basket);\n  }\n  removeItemFromBasket(id, quantity = 1) {\n    const basket = this.getCurrentBasketValue();\n    if (!basket) return; //if basket is empty, return nothing\n    const item = basket.items.find(x => x.id === id);\n    if (item) {\n      item.quantity -= quantity; //decrement\n      if (item.quantity === 0) {\n        //if its now equal to 0 after the decrement\n        basket.items = basket.items.filter(x => x.id !== id);\n      }\n      if (basket.items.length > 0) this.setBasket(basket);else this.deleteBasket(basket);\n    }\n  }\n  deleteBasket(basket) {\n    return this.http.delete(this.baseUrl + 'basket?id=' + basket.id).subscribe({\n      next: () => {\n        this.deleteLocalBasket();\n      }\n    });\n  }\n  deleteLocalBasket() {\n    this.basketSource.next(null);\n    this.basketTotalSource.next(null);\n    localStorage.removeItem('basket_id');\n  }\n  addOrUpdateItem(items, itemToAdd, quantity) {\n    const item = items.find(x => x.id === itemToAdd.id);\n    if (item) item.quantity += quantity; //increase the quantity if we have item in our basket\n    else {\n      itemToAdd.quantity = quantity;\n      items.push(itemToAdd);\n    }\n    return items;\n  }\n  createBasket() {\n    const basket = new Basket();\n    localStorage.setItem('basket_id', basket.id);\n    return basket;\n  }\n  mapProductItemToBasketItem(item) {\n    return {\n      id: item.id,\n      productName: item.name,\n      price: item.price,\n      quantity: 0,\n      pictureUrl: item.pictureUrl,\n      brand: item.productBrand,\n      type: item.productType\n    };\n  }\n  calculateTotals() {\n    const basket = this.getCurrentBasketValue();\n    if (!basket) return;\n    const subtotal = basket.items.reduce((a, b) => b.price * b.quantity + a, 0); //where a = previous value, b = current value. Any letter can be used for rep.\n    const total = subtotal + this.shipping;\n    this.basketTotalSource.next({\n      shipping: this.shipping,\n      total,\n      subtotal\n    });\n  }\n  isProduct(item) {\n    return item.productBrand !== undefined;\n  }\n}\nBasketService.ɵfac = function BasketService_Factory(t) {\n  return new (t || BasketService)(i0.ɵɵinject(i1.HttpClient));\n};\nBasketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BasketService,\n  factory: BasketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","map","environment","Basket","BasketService","constructor","http","apiUrl","basketSource","asObservable","basketTotalSource","createPaymentIntent","post","baseUrl","getCurrentBasketValue","id","pipe","basket","next","console","lo","setShippingPrice","deliveryMethod","shipping","price","deliveryMethodId","setBasket","getBasket","get","subscribe","calculateTotals","value","addItemToBasket","item","quantity","isProduct","mapProductItemToBasketItem","log","createBasket","items","addOrUpdateItem","removeItemFromBasket","find","x","filter","length","deleteBasket","delete","deleteLocalBasket","localStorage","removeItem","itemToAdd","push","setItem","productName","name","pictureUrl","brand","productBrand","type","productType","subtotal","reduce","a","b","total","undefined","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\olumi\\Desktop\\ECommerce\\client\\src\\app\\basket\\basket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { Basket, BasketItem, BasketTotals } from '../shared/models/basket';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from '../shared/models/product';\nimport { DeliveryMethod } from '../shared/models/deliveryMethod';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BasketService {\n  baseUrl = environment.apiUrl;\n  private basketSource = new BehaviorSubject<Basket | null>(null);//this null means that when our app first start up b4 we done anything, we are not going to hv a basket and it will be null. other component will not hv access to this thats why its private. you can only update this from inside our service\n  basketSource$ = this.basketSource.asObservable(); //our component will be able to subscribe to this and get the info they want\n  private basketTotalSource = new BehaviorSubject<BasketTotals | null>(null);\n  basketTotalSource$ = this.basketTotalSource.asObservable();\n  shipping = 0;\n\n  constructor(private http: HttpClient) { }\n\n  createPaymentIntent() {\n    return this.http.post<Basket>(this.baseUrl + 'payments/' + this.getCurrentBasketValue()?.id, {})\n      .pipe(\n        map(basket => {\n          this.basketSource.next(basket);\n          console.lo\n        })\n      )\n  }\n\n   setShippingPrice(deliveryMethod: DeliveryMethod) {\n    const basket = this.getCurrentBasketValue();\n    this.shipping = deliveryMethod.price;\n    if (basket) {\n      basket.deliveryMethodId = deliveryMethod.id;\n      this.setBasket(basket);\n    }\n   }\n\n  getBasket(id: string) {\n    return this.http.get<Basket>(this.baseUrl + 'basket?id=' + id).subscribe({\n      next: basket => {\n        this.basketSource.next(basket);\n        this.calculateTotals();\n      }\n    })\n  }\n\n  setBasket(basket: Basket) {\n    return this.http.post<Basket>(this.baseUrl + 'basket', basket).subscribe({\n      next: basket => {\n        this.basketSource.next(basket);\n        this.calculateTotals();\n\n      }\n    })\n  }\n\n  getCurrentBasketValue() {  // this will give us the value of the basket\n    return this.basketSource.value;\n  }\n\n  addItemToBasket(item: Product | BasketItem, quantity = 1) {  //Either you add from the product page or from the basket. Basket is expecting BasketItems not Product.Therefore wil have to map the properties from one to another.c# uses Auto mapper, but in angular will create a class for the mapping\n    if (this.isProduct(item)) item = this.mapProductItemToBasketItem(item);  //type guard is used here referencing isProduct below\n    console.log(item);\n    const basket = this.getCurrentBasketValue() ?? this.createBasket();\n    basket.items = this.addOrUpdateItem(basket.items, item, quantity);\n    this.setBasket(basket);\n  }\n\n   removeItemFromBasket(id: number, quantity = 1) {\n    const basket = this.getCurrentBasketValue();\n    if (!basket) return; //if basket is empty, return nothing\n    const item = basket.items.find(x => x.id === id);\n    if (item) {\n      item.quantity -= quantity; //decrement\n      if (item.quantity === 0) { //if its now equal to 0 after the decrement\n        basket.items = basket.items.filter(x => x.id !== id);\n      }\n      if (basket.items.length > 0) this.setBasket(basket);\n      else this.deleteBasket(basket);\n    }\n  }\n\n  deleteBasket(basket: Basket) {\n    return this.http.delete(this.baseUrl + 'basket?id=' + basket.id).subscribe({\n      next: () => {\n        this.deleteLocalBasket();\n      }\n    })\n  }\n\n  deleteLocalBasket() {     //this will delete the basket locally after the order hv been submitted.\n    this.basketSource.next(null);\n    this.basketTotalSource.next(null);\n    localStorage.removeItem('basket_id');\n  }\n\n  private addOrUpdateItem(items: BasketItem[], itemToAdd: BasketItem, quantity: number): BasketItem[] {// private becos we are not using it outside this service\n    const item = items.find(x => x.id === itemToAdd.id);\n    if (item) item.quantity += quantity; //increase the quantity if we have item in our basket\n    else {\n      itemToAdd.quantity = quantity;\n      items.push(itemToAdd);\n    }\n    return items;\n  }\n\n  private createBasket(): Basket { // private becos we are not using it outside this service\n    const basket = new Basket();\n    localStorage.setItem('basket_id', basket.id);\n    return basket;\n  }\n\n  private mapProductItemToBasketItem(item: Product): BasketItem {\n    return { //mapping one properties to another\n      id: item.id,\n      productName: item.name,\n      price: item.price,\n      quantity: 0,\n      pictureUrl: item.pictureUrl,\n      brand: item.productBrand,\n      type: item.productType\n    }\n  }\n\n  private calculateTotals() {\n    const basket = this.getCurrentBasketValue();\n    if (!basket) return;\n    const subtotal = basket.items.reduce((a, b) => (b.price * b.quantity) + a, 0); //where a = previous value, b = current value. Any letter can be used for rep.\n    const total = subtotal + this.shipping;\n    this.basketTotalSource.next({ shipping: this.shipping, total, subtotal });\n  }\n\n  private isProduct(item: Product | BasketItem): item is Product {\n    return (item as Product).productBrand !== undefined;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}