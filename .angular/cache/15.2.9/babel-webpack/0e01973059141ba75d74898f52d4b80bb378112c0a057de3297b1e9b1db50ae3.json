{"ast":null,"code":"import { delay, finalize, identity } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/busy.service\";\nexport class LoadingInterceptor {\n  constructor(busyService) {\n    this.busyService = busyService;\n  }\n  intercept(request, next) {\n    if (request.url.includes('emailExists') || request.method === 'POST' && request.url.includes('orders') || request.method === 'DELETE') {\n      return next.handle(request);\n    }\n    this.busyService.busy();\n    return next.handle(request).pipe(environment.production ? identity : delay(1000),\n    //delay only occur when we are running in development mode.\n    finalize(() => this.busyService.idle()));\n  }\n}\nLoadingInterceptor.ɵfac = function LoadingInterceptor_Factory(t) {\n  return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.BusyService));\n};\nLoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoadingInterceptor,\n  factory: LoadingInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AAOA,SAAqBA,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,QAAQ,MAAM;AAE5D,SAASC,WAAW,QAAQ,8BAA8B;;;AAG1D,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAiB;EAEhDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IACED,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,aAAa,CAAC,IACnCH,OAAO,CAACI,MAAM,KAAK,MAAM,IAAIJ,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAC3DH,OAAO,CAACI,MAAM,KAAK,QAAQ,EAC3B;MACA,OAAOH,IAAI,CAACI,MAAM,CAACL,OAAO,CAAC;;IAG7B,IAAI,CAACF,WAAW,CAACQ,IAAI,EAAE;IACvB,OAAOL,IAAI,CAACI,MAAM,CAACL,OAAO,CAAC,CAACO,IAAI,CAC7BZ,WAAW,CAACa,UAAU,GAAGd,QAAQ,GAAGF,KAAK,CAAC,IAAI,CAAC;IAAG;IACnDC,QAAQ,CAAC,MAAM,IAAI,CAACK,WAAW,CAACW,IAAI,EAAE,CAAC,CACxC;EACH;;AAlBWb,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAc,SAAlBd,kBAAkB;AAAA","names":["delay","finalize","identity","environment","LoadingInterceptor","constructor","busyService","intercept","request","next","url","includes","method","handle","busy","pipe","production","idle","factory"],"sourceRoot":"","sources":["C:\\Users\\olumi\\Desktop\\ECommerce\\client\\src\\app\\core\\interceptors\\loading.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, delay, finalize, identity } from 'rxjs';\nimport { BusyService } from '../services/busy.service';\nimport { environment } from 'src/environments/environment';\n\n@Injectable()\nexport class LoadingInterceptor implements HttpInterceptor {\n\n  constructor(private busyService: BusyService) { }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (\n      request.url.includes('emailExists') ||\n      request.method === 'POST' && request.url.includes('orders') ||\n      request.method === 'DELETE'\n    ) {\n      return next.handle(request);\n    }\n\n    this.busyService.busy();\n    return next.handle(request).pipe(\n      (environment.production ? identity : delay(1000)), //delay only occur when we are running in development mode.\n      finalize(() => this.busyService.idle())\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}