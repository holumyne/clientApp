{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ShopService {\n  // brands: Brand[] = [];\n  // types: Type[] = [];\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:5001/api/';\n    //  pagination?: Pagination<Product[]>;\n    this.products = [];\n  }\n  //getProducts(brandId?: number, typeId?: number, sort?: string) {\n  getProducts(shopParams) {\n    //angular param for the query string\n    let params = new HttpParams();\n    if (shopParams.brandId > 0) params = params.append('brandId', shopParams.brandId);\n    if (shopParams.typeId) params = params.append('typeId', shopParams.typeId);\n    params = params.append('sort', shopParams.sort);\n    params = params.append('pageIndex', shopParams.pageNumber);\n    params = params.append('pageSize', shopParams.pageSize);\n    if (shopParams.search) params = params.append('search', shopParams.search);\n    //return this.http.get<Pagination<Product[]>>(this.baseUrl + 'products?pageSize=50');//better way to include the query string is to use angular params\n    return this.http.get(this.baseUrl + 'products', {\n      params: params\n    }).pipe(map(response => {\n      this.products = response.data;\n      return response;\n    }));\n  }\n  getProduct(id) {\n    const product = this.products.find(p => p.id === id);\n    if (product) return;\n    return this.http.get(this.baseUrl + 'products/' + id);\n  }\n  getBrands() {\n    return this.http.get(this.baseUrl + 'products/brands');\n  }\n  getTypes() {\n    return this.http.get(this.baseUrl + 'products/types');\n  }\n}\nShopService.ɵfac = function ShopService_Factory(t) {\n  return new (t || ShopService)(i0.ɵɵinject(i1.HttpClient));\n};\nShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShopService,\n  factory: ShopService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,UAAU,QAAQ,sBAAsB;AAO7D,SAASC,GAAG,QAAQ,MAAM;;;AAK1B,OAAM,MAAOC,WAAW;EAItB;EACA;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IANxB,YAAO,GAAG,6BAA6B;IACvC;IACA,aAAQ,GAAc,EAAE;EAIgB;EAExC;EACEC,WAAW,CAACC,UAAsB;IAClC;IACE,IAAIC,MAAM,GAAG,IAAIP,UAAU,EAAE;IAE7B,IAAIM,UAAU,CAACE,OAAO,GAAG,CAAC,EAAED,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEH,UAAU,CAACE,OAAO,CAAC;IACjF,IAAIF,UAAU,CAACI,MAAM,EAAEH,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAEH,UAAU,CAACI,MAAM,CAAC;IACnEH,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAC,MAAM,EAAEH,UAAU,CAACK,IAAI,CAAC;IAC/CJ,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEH,UAAU,CAACM,UAAU,CAAC;IAC1DL,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEH,UAAU,CAACO,QAAQ,CAAC;IAC9D,IAAGP,UAAU,CAACQ,MAAM,EAAEP,MAAM,GAAGA,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAEH,UAAU,CAACQ,MAAM,CAAC;IAE3E;IACA,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAwB,IAAI,CAACC,OAAO,GAAG,UAAU,EAAE;MAACT,MAAM,EAAEA;IAAM,CAAC,CAAC,CAACU,IAAI,CAC3FhB,GAAG,CAACiB,QAAQ,IAAG;MACb,IAAI,CAACC,QAAQ,GAAGD,QAAQ,CAACE,IAAI;MAC7B,OAAOF,QAAQ;IACjB,CAAC,CAAC,CACH;EACH;EAEAG,UAAU,CAACC,EAAU;IACnB,MAAMC,OAAO,GAAG,IAAI,CAACJ,QAAQ,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACH,EAAE,KAAKA,EAAE,CAAC;IACpD,IAAIC,OAAO,EAAE;IACb,OAAO,IAAI,CAACnB,IAAI,CAACW,GAAG,CAAU,IAAI,CAACC,OAAO,GAAG,WAAW,GAAGM,EAAE,CAAC;EAChE;EAEAI,SAAS;IACP,OAAO,IAAI,CAACtB,IAAI,CAACW,GAAG,CAAU,IAAI,CAACC,OAAO,GAAG,iBAAiB,CAAC;EACjE;EAEAW,QAAQ;IACN,OAAO,IAAI,CAACvB,IAAI,CAACW,GAAG,CAAS,IAAI,CAACC,OAAO,GAAG,gBAAgB,CAAC;EAC/D;;AA1CWd,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM","names":["HttpParams","map","ShopService","constructor","http","getProducts","shopParams","params","brandId","append","typeId","sort","pageNumber","pageSize","search","get","baseUrl","pipe","response","products","data","getProduct","id","product","find","p","getBrands","getTypes","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\olumi\\Desktop\\ECommerce\\client\\src\\app\\shop\\shop.service.ts"],"sourcesContent":["import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Pagination } from '../shared/models/pagination';\nimport { Product } from '../shared/models/product';\nimport { Brand } from '../shared/models/brand';\nimport { Type } from '../shared/models/type';\nimport { ShopParams } from '../shared/models/shopParams';\nimport { map } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopService {\n  baseUrl = 'https://localhost:5001/api/';\n  //  pagination?: Pagination<Product[]>;\n  products: Product[] = [];\n  // brands: Brand[] = [];\n  // types: Type[] = [];\n\n  constructor(private http: HttpClient) { }\n\n  //getProducts(brandId?: number, typeId?: number, sort?: string) {\n    getProducts(shopParams: ShopParams) {\n    //angular param for the query string\n      let params = new HttpParams();\n      \n      if (shopParams.brandId > 0) params = params.append('brandId', shopParams.brandId);\n      if (shopParams.typeId) params = params.append('typeId', shopParams.typeId);\n             params = params.append('sort', shopParams.sort);\n             params = params.append('pageIndex', shopParams.pageNumber);\n             params = params.append('pageSize', shopParams.pageSize);\n      if(shopParams.search) params = params.append('search', shopParams.search);\n\n    //return this.http.get<Pagination<Product[]>>(this.baseUrl + 'products?pageSize=50');//better way to include the query string is to use angular params\n    return this.http.get<Pagination<Product[]>>(this.baseUrl + 'products', {params: params}).pipe(\n      map(response => {\n        this.products = response.data;\n        return response\n      })\n    )\n  }\n\n  getProduct(id: number) {\n    const product = this.products.find(p => p.id === id);\n    if (product) return \n    return this.http.get<Product>(this.baseUrl + 'products/' + id);\n  }\n\n  getBrands() {\n    return this.http.get<Brand[]>(this.baseUrl + 'products/brands');\n  }\n\n  getTypes() {\n    return this.http.get<Type[]>(this.baseUrl + 'products/types');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}