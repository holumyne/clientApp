{"ast":null,"code":"import { delay, finalize, identity } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/busy.service\";\nexport let LoadingInterceptor = /*#__PURE__*/(() => {\n  class LoadingInterceptor {\n    constructor(busyService) {\n      this.busyService = busyService;\n    }\n    intercept(request, next) {\n      if (request.url.includes('emailExists') || request.method === 'POST' && request.url.includes('orders') || request.method === 'DELETE') {\n        return next.handle(request);\n      }\n      this.busyService.busy();\n      return next.handle(request).pipe(environment.production ? identity : delay(1000),\n      //delay only occur when we are running in development mode.\n      finalize(() => this.busyService.idle()));\n    }\n  }\n  LoadingInterceptor.ɵfac = function LoadingInterceptor_Factory(t) {\n    return new (t || LoadingInterceptor)(i0.ɵɵinject(i1.BusyService));\n  };\n  LoadingInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoadingInterceptor,\n    factory: LoadingInterceptor.ɵfac\n  });\n  return LoadingInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}