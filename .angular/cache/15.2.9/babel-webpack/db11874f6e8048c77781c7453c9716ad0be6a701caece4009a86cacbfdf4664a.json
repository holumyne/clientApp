{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { ShopParams } from '../shared/models/shopParams';\nimport { map, of } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ShopService = /*#__PURE__*/(() => {\n  class ShopService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.apiUrl;\n      this.products = [];\n      this.brands = [];\n      this.types = [];\n      this.shopParams = new ShopParams();\n      this.productCache = new Map(); //this Map is a JS map that store info in key, value pair\n    }\n    //getProducts(brandId?: number, typeId?: number, sort?: string) {\n    getProducts(useCache = true) {\n      if (!useCache) this.productCache = new Map();\n      if (this.productCache.size > 0 && useCache) {\n        if (this.productCache.has(Object.values(this.shopParams).join('-'))) {\n          this.pagination = this.productCache.get(Object.values(this.shopParams).join('-'));\n          if (this.pagination) return of(this.pagination);\n        }\n      }\n      //angular param for the query string\n      let params = new HttpParams();\n      if (this.shopParams.brandId > 0) params = params.append('brandId', this.shopParams.brandId);\n      if (this.shopParams.typeId) params = params.append('typeId', this.shopParams.typeId);\n      params = params.append('sort', this.shopParams.sort);\n      params = params.append('pageIndex', this.shopParams.pageNumber);\n      params = params.append('pageSize', this.shopParams.pageSize);\n      if (this.shopParams.search) params = params.append('search', this.shopParams.search);\n      //return this.http.get<Pagination<Product[]>>(this.baseUrl + 'products?pageSize=50');//better way to include the query string is to use angular params\n      return this.http.get(this.baseUrl + 'products', {\n        params: params\n      }).pipe(map(response => {\n        this.productCache.set(Object.values(this.shopParams).join('-'), response); //adding the old and the new response\n        this.pagination = response;\n        return response;\n      }));\n    }\n    setShopParams(params) {\n      this.shopParams = params;\n    }\n    getShopParams() {\n      return this.shopParams;\n    }\n    getProduct(id) {\n      const product = [...this.productCache.values()].reduce((acc, paginatedResult) => {\n        return {\n          ...acc,\n          ...paginatedResult.data.find(x => x.id === id)\n        };\n      }, {});\n      if (Object.keys(product).length !== 0) return of(product); //we us of, becos we want an observable of product to be returned.\n      return this.http.get(this.baseUrl + 'products/' + id);\n    }\n    getBrands() {\n      if (this.brands.length > 0) return of(this.brands); //to check if we hv brand in our client side\n      return this.http.get(this.baseUrl + 'products/brands').pipe(\n      //if we dont hv it, get it from the API\n      map(brands => this.brands = brands));\n    }\n    getTypes() {\n      if (this.types.length > 0) return of(this.types);\n      return this.http.get(this.baseUrl + 'products/types').pipe(map(types => this.types = types));\n    }\n  }\n  ShopService.ɵfac = function ShopService_Factory(t) {\n    return new (t || ShopService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShopService,\n    factory: ShopService.ɵfac,\n    providedIn: 'root'\n  });\n  return ShopService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}