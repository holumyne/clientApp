{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { ShopParams } from '../shared/models/shopParams';\nlet ShopComponent = class ShopComponent {\n  constructor(shopService) {\n    this.shopService = shopService;\n    this.products = []; //where to store the response we got from our Api with an initial value of empty array.\n    this.brands = [];\n    this.types = [];\n    this.sortOptions = [{\n      name: 'Alphabetical',\n      value: 'name'\n    }, {\n      name: 'Price: Low to high',\n      value: 'priceAsc'\n    }, {\n      name: 'Price: High to low',\n      value: 'priceDesc'\n    }];\n    this.totalCount = 0;\n    this.shopParams = shopService.getShopParams(); //now initializing this property inside the constructor\n  }\n\n  ngOnInit() {\n    this.getProducts();\n    this.getBrands();\n    this.getTypes();\n  }\n  getProducts() {\n    // this.shopService.getProducts(this.brandIdSelected, this.typeIdSelected, this.sortSelected).subscribe({\n    this.shopService.getProducts().subscribe({\n      next: response => {\n        this.products = response.data; //what to do next--return the product as response        \n        //  this.shopParams.pageNumber = response.pageIndex;\n        //  this.shopParams.pageSize = response.pageSize; we dont need both anymore becos now stored in our service\n        this.totalCount = response.count;\n      },\n      error: error => console.log(error),\n      complete: () => {\n        console.log('request completed');\n      }\n    });\n  }\n  getBrands() {\n    this.shopService.getBrands().subscribe({\n      // next: response => this.brands = response, //the reponse here is a brand array becos we don't hv a pagination here\n      next: response => this.brands = [{\n        id: 0,\n        name: 'All'\n      }, ...response],\n      error: error => console.log(error),\n      complete: () => {\n        console.log('request completed');\n      }\n    });\n  }\n  getTypes() {\n    this.shopService.getTypes().subscribe({\n      next: response => this.types = [{\n        id: 0,\n        name: 'All'\n      }, ...response],\n      error: error => console.log(error),\n      complete: () => {\n        console.log('request completed');\n      }\n    });\n  }\n  onBrandSelected(brandId) {\n    const params = this.shopService.getShopParams();\n    params.brandId = brandId;\n    params.pageNumber = 1;\n    this.shopService.setShopParams(params);\n    this.shopParams = params;\n    this.getProducts();\n  }\n  onTypeSelected(typeId) {\n    const params = this.shopService.getShopParams();\n    params.typeId = typeId;\n    params.pageNumber = 1;\n    this.shopService.setShopParams(params);\n    this.shopParams = params;\n    this.getProducts();\n  }\n  onSortSelected(event) {\n    const params = this.shopService.getShopParams();\n    params.sort = event.target.value;\n    this.shopService.setShopParams(params);\n    this.shopParams = params;\n    this.getProducts();\n  }\n  onPageChanged(event) {\n    const params = this.shopService.getShopParams();\n    if (params.pageNumber !== event) {\n      params.pageNumber = event;\n      this.shopService.setShopParams(params);\n      this.shopParams = params;\n      this.getProducts();\n    }\n  }\n  onSearch() {\n    const params = this.shopService.getShopParams();\n    params.search = this.searchTerm?.nativeElement.value;\n    params.pageNumber = 1;\n    this.shopService.setShopParams(params);\n    this.shopParams = params;\n    this.getProducts();\n  }\n  onReset() {\n    if (this.searchTerm) this.searchTerm.nativeElement.value = '';\n    this.shopParams = new ShopParams();\n    this.shopService.setShopParams(this.shopParams);\n    this.getProducts();\n  }\n};\n__decorate([ViewChild('search')], ShopComponent.prototype, \"searchTerm\", void 0);\nShopComponent = __decorate([Component({\n  selector: 'app-shop',\n  templateUrl: './shop.component.html',\n  styleUrls: ['./shop.component.scss']\n})], ShopComponent);\nexport { ShopComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","ShopParams","ShopComponent","constructor","shopService","name","value","shopParams","getShopParams","ngOnInit","getProducts","getBrands","getTypes","subscribe","next","response","products","data","totalCount","count","error","console","log","complete","brands","id","types","onBrandSelected","brandId","params","pageNumber","setShopParams","onTypeSelected","typeId","onSortSelected","event","sort","target","onPageChanged","onSearch","search","searchTerm","nativeElement","onReset","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\olumi\\Desktop\\ECommerce\\client\\src\\app\\shop\\shop.component.ts"],"sourcesContent":["import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { Product } from '../shared/models/product';\nimport { ShopService } from './shop.service';\nimport { Brand } from '../shared/models/brand';\nimport { Type } from '../shared/models/type';\nimport { ShopParams } from '../shared/models/shopParams';\n\n@Component({\n  selector: 'app-shop',\n  templateUrl: './shop.component.html',\n  styleUrls: ['./shop.component.scss']\n})\nexport class ShopComponent implements OnInit {\n  @ViewChild('search') searchTerm?: ElementRef;\n  products: Product[] = []; //where to store the response we got from our Api with an initial value of empty array.\n  brands: Brand[] = [];\n  types: Type[] = [];\n  // brandIdSelected = 0;\n  // typeIdSelected = 0;\n  // sortSelected = 'name';\n\n  //shopParams = new ShopParams(); //now moving this to ShopService becos service is singleton, better stored there.\n  shopParams: ShopParams;\n  sortOptions = [\n    {name: 'Alphabetical', value: 'name'},\n    {name: 'Price: Low to high', value: 'priceAsc'},\n    {name: 'Price: High to low', value: 'priceDesc'},\n  ];\n  totalCount = 0;  \n\n  constructor(private shopService: ShopService) { \n    this.shopParams = shopService.getShopParams(); //now initializing this property inside the constructor\n  }\n\n  ngOnInit(): void {\n    this.getProducts();\n    this.getBrands();\n    this.getTypes();\n  }\n\n  getProducts() {\n   // this.shopService.getProducts(this.brandIdSelected, this.typeIdSelected, this.sortSelected).subscribe({\n      this.shopService.getProducts().subscribe({\n      next: response => {\n        this.products = response.data;   //what to do next--return the product as response        \n        //  this.shopParams.pageNumber = response.pageIndex;\n        //  this.shopParams.pageSize = response.pageSize; we dont need both anymore becos now stored in our service\n         this.totalCount = response.count;\n        },\n      error: error => console.log(error),  //what to do if there is an error -- log the error into the console.\n      complete: () => {\n        console.log('request completed');\n      }\n    })\n  }\n  getBrands() {\n    this.shopService.getBrands().subscribe({\n     // next: response => this.brands = response, //the reponse here is a brand array becos we don't hv a pagination here\n      next: response => this.brands = [{id: 0, name: 'All'}, ...response], \n      error: error => console.log(error),\n      complete: () => {\n        console.log('request completed');\n      }\n    })\n  }\n  getTypes() {\n    this.shopService.getTypes().subscribe({\n      next: response => this.types = [{id: 0, name: 'All'}, ...response],  //...-spread operator\n      error: error => console.log(error),\n      complete: () => {\n        console.log('request completed');\n      }\n    })\n  }\n\n  onBrandSelected(brandId: number) {\n    const params = this.shopService.getShopParams();\n    params.brandId = brandId;\n    params.pageNumber = 1;\n    this.shopService.setShopParams(params);\n    this.shopParams = params;\n    this.getProducts();\n  }\n\n  onTypeSelected(typeId: number) {\n    const params = this.shopService.getShopParams();\n    params.typeId = typeId;\n    params.pageNumber = 1;\n    this.shopService.setShopParams(params);\n    this.shopParams = params;\n    this.getProducts();\n  }\n\n  onSortSelected(event: any) {\n    const params = this.shopService.getShopParams();\n    params.sort = event.target.value;\n    this.shopService.setShopParams(params);\n    this.shopParams = params;\n    this.getProducts();\n  }\n\n  onPageChanged(event: any) {\n    const params = this.shopService.getShopParams();\n    if (params.pageNumber !== event) {\n      params.pageNumber = event;\n      this.shopService.setShopParams(params);\n      this.shopParams = params;\n      this.getProducts();\n    }\n  }\n\n  onSearch() {\n    const params = this.shopService.getShopParams();\n    params.search = this.searchTerm?.nativeElement.value;\n    params.pageNumber = 1;\n    this.shopService.setShopParams(params);\n    this.shopParams = params;\n    this.getProducts();\n  }\n\n  onReset() {\n    if (this.searchTerm) this.searchTerm.nativeElement.value = '';\n    this.shopParams = new ShopParams();\n    this.shopService.setShopParams(this.shopParams);\n    this.getProducts();\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}